/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Asset,
  Asset$inboundSchema,
  Asset$Outbound,
  Asset$outboundSchema,
} from "./asset.js";
import {
  ContractWithIndicator,
  ContractWithIndicator$inboundSchema,
  ContractWithIndicator$Outbound,
  ContractWithIndicator$outboundSchema,
} from "./contractwithindicator.js";

export type AssetIndicatorData = {
  asset: Asset;
  contracts: Array<ContractWithIndicator>;
};

/** @internal */
export const AssetIndicatorData$inboundSchema: z.ZodType<
  AssetIndicatorData,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset: Asset$inboundSchema,
  contracts: z.array(ContractWithIndicator$inboundSchema),
});

/** @internal */
export type AssetIndicatorData$Outbound = {
  asset: Asset$Outbound;
  contracts: Array<ContractWithIndicator$Outbound>;
};

/** @internal */
export const AssetIndicatorData$outboundSchema: z.ZodType<
  AssetIndicatorData$Outbound,
  z.ZodTypeDef,
  AssetIndicatorData
> = z.object({
  asset: Asset$outboundSchema,
  contracts: z.array(ContractWithIndicator$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetIndicatorData$ {
  /** @deprecated use `AssetIndicatorData$inboundSchema` instead. */
  export const inboundSchema = AssetIndicatorData$inboundSchema;
  /** @deprecated use `AssetIndicatorData$outboundSchema` instead. */
  export const outboundSchema = AssetIndicatorData$outboundSchema;
  /** @deprecated use `AssetIndicatorData$Outbound` instead. */
  export type Outbound = AssetIndicatorData$Outbound;
}

export function assetIndicatorDataToJSON(
  assetIndicatorData: AssetIndicatorData,
): string {
  return JSON.stringify(
    AssetIndicatorData$outboundSchema.parse(assetIndicatorData),
  );
}

export function assetIndicatorDataFromJSON(
  jsonString: string,
): SafeParseResult<AssetIndicatorData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetIndicatorData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetIndicatorData' from JSON`,
  );
}
