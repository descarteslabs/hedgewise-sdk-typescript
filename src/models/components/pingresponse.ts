/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PingResponse = {
  status?: "available" | undefined;
};

/** @internal */
export const PingResponse$inboundSchema: z.ZodType<
  PingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.literal("available").optional(),
});

/** @internal */
export type PingResponse$Outbound = {
  status: "available";
};

/** @internal */
export const PingResponse$outboundSchema: z.ZodType<
  PingResponse$Outbound,
  z.ZodTypeDef,
  PingResponse
> = z.object({
  status: z.literal("available").default("available" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PingResponse$ {
  /** @deprecated use `PingResponse$inboundSchema` instead. */
  export const inboundSchema = PingResponse$inboundSchema;
  /** @deprecated use `PingResponse$outboundSchema` instead. */
  export const outboundSchema = PingResponse$outboundSchema;
  /** @deprecated use `PingResponse$Outbound` instead. */
  export type Outbound = PingResponse$Outbound;
}

export function pingResponseToJSON(pingResponse: PingResponse): string {
  return JSON.stringify(PingResponse$outboundSchema.parse(pingResponse));
}

export function pingResponseFromJSON(
  jsonString: string,
): SafeParseResult<PingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PingResponse' from JSON`,
  );
}
