/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PhenologyData,
  PhenologyData$inboundSchema,
  PhenologyData$Outbound,
  PhenologyData$outboundSchema,
} from "./phenologydata.js";

export type GetSupplyPhenologyResponse = {
  success?: true | undefined;
  data: Array<PhenologyData>;
};

/** @internal */
export const GetSupplyPhenologyResponse$inboundSchema: z.ZodType<
  GetSupplyPhenologyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.literal(true).optional(),
  data: z.array(PhenologyData$inboundSchema),
});

/** @internal */
export type GetSupplyPhenologyResponse$Outbound = {
  success: true;
  data: Array<PhenologyData$Outbound>;
};

/** @internal */
export const GetSupplyPhenologyResponse$outboundSchema: z.ZodType<
  GetSupplyPhenologyResponse$Outbound,
  z.ZodTypeDef,
  GetSupplyPhenologyResponse
> = z.object({
  success: z.literal(true).default(true as const),
  data: z.array(PhenologyData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSupplyPhenologyResponse$ {
  /** @deprecated use `GetSupplyPhenologyResponse$inboundSchema` instead. */
  export const inboundSchema = GetSupplyPhenologyResponse$inboundSchema;
  /** @deprecated use `GetSupplyPhenologyResponse$outboundSchema` instead. */
  export const outboundSchema = GetSupplyPhenologyResponse$outboundSchema;
  /** @deprecated use `GetSupplyPhenologyResponse$Outbound` instead. */
  export type Outbound = GetSupplyPhenologyResponse$Outbound;
}

export function getSupplyPhenologyResponseToJSON(
  getSupplyPhenologyResponse: GetSupplyPhenologyResponse,
): string {
  return JSON.stringify(
    GetSupplyPhenologyResponse$outboundSchema.parse(getSupplyPhenologyResponse),
  );
}

export function getSupplyPhenologyResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSupplyPhenologyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSupplyPhenologyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSupplyPhenologyResponse' from JSON`,
  );
}
