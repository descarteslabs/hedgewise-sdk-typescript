/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Dataset,
  Dataset$inboundSchema,
  Dataset$Outbound,
  Dataset$outboundSchema,
} from "./dataset.js";

export type GetDatasetsResponse = {
  success?: true | undefined;
  data: Array<Dataset>;
};

/** @internal */
export const GetDatasetsResponse$inboundSchema: z.ZodType<
  GetDatasetsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.literal(true).optional(),
  data: z.array(Dataset$inboundSchema),
});

/** @internal */
export type GetDatasetsResponse$Outbound = {
  success: true;
  data: Array<Dataset$Outbound>;
};

/** @internal */
export const GetDatasetsResponse$outboundSchema: z.ZodType<
  GetDatasetsResponse$Outbound,
  z.ZodTypeDef,
  GetDatasetsResponse
> = z.object({
  success: z.literal(true).default(true as const),
  data: z.array(Dataset$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDatasetsResponse$ {
  /** @deprecated use `GetDatasetsResponse$inboundSchema` instead. */
  export const inboundSchema = GetDatasetsResponse$inboundSchema;
  /** @deprecated use `GetDatasetsResponse$outboundSchema` instead. */
  export const outboundSchema = GetDatasetsResponse$outboundSchema;
  /** @deprecated use `GetDatasetsResponse$Outbound` instead. */
  export type Outbound = GetDatasetsResponse$Outbound;
}

export function getDatasetsResponseToJSON(
  getDatasetsResponse: GetDatasetsResponse,
): string {
  return JSON.stringify(
    GetDatasetsResponse$outboundSchema.parse(getDatasetsResponse),
  );
}

export function getDatasetsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDatasetsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDatasetsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDatasetsResponse' from JSON`,
  );
}
