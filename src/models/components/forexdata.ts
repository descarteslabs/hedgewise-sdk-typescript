/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ForexTick,
  ForexTick$inboundSchema,
  ForexTick$Outbound,
  ForexTick$outboundSchema,
} from "./forextick.js";

export type ForexData = {
  code: string;
  name: string;
  marketDate: Date;
  prices: Array<ForexTick>;
};

/** @internal */
export const ForexData$inboundSchema: z.ZodType<
  ForexData,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  name: z.string(),
  market_date: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  prices: z.array(ForexTick$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "market_date": "marketDate",
  });
});

/** @internal */
export type ForexData$Outbound = {
  code: string;
  name: string;
  market_date: string;
  prices: Array<ForexTick$Outbound>;
};

/** @internal */
export const ForexData$outboundSchema: z.ZodType<
  ForexData$Outbound,
  z.ZodTypeDef,
  ForexData
> = z.object({
  code: z.string(),
  name: z.string(),
  marketDate: z.date().transform(v => v.toISOString()),
  prices: z.array(ForexTick$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    marketDate: "market_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForexData$ {
  /** @deprecated use `ForexData$inboundSchema` instead. */
  export const inboundSchema = ForexData$inboundSchema;
  /** @deprecated use `ForexData$outboundSchema` instead. */
  export const outboundSchema = ForexData$outboundSchema;
  /** @deprecated use `ForexData$Outbound` instead. */
  export type Outbound = ForexData$Outbound;
}

export function forexDataToJSON(forexData: ForexData): string {
  return JSON.stringify(ForexData$outboundSchema.parse(forexData));
}

export function forexDataFromJSON(
  jsonString: string,
): SafeParseResult<ForexData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForexData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForexData' from JSON`,
  );
}
