/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FeatureTransformedHistoricalData = {
  xformFeatureCode: string;
  date: RFCDate;
  value: number;
  label?: string | null | undefined;
};

/** @internal */
export const FeatureTransformedHistoricalData$inboundSchema: z.ZodType<
  FeatureTransformedHistoricalData,
  z.ZodTypeDef,
  unknown
> = z.object({
  xform_feature_code: z.string(),
  date: z.string().transform(v => new RFCDate(v)),
  value: z.number(),
  label: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "xform_feature_code": "xformFeatureCode",
  });
});

/** @internal */
export type FeatureTransformedHistoricalData$Outbound = {
  xform_feature_code: string;
  date: string;
  value: number;
  label?: string | null | undefined;
};

/** @internal */
export const FeatureTransformedHistoricalData$outboundSchema: z.ZodType<
  FeatureTransformedHistoricalData$Outbound,
  z.ZodTypeDef,
  FeatureTransformedHistoricalData
> = z.object({
  xformFeatureCode: z.string(),
  date: z.instanceof(RFCDate).transform(v => v.toString()),
  value: z.number(),
  label: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    xformFeatureCode: "xform_feature_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeatureTransformedHistoricalData$ {
  /** @deprecated use `FeatureTransformedHistoricalData$inboundSchema` instead. */
  export const inboundSchema = FeatureTransformedHistoricalData$inboundSchema;
  /** @deprecated use `FeatureTransformedHistoricalData$outboundSchema` instead. */
  export const outboundSchema = FeatureTransformedHistoricalData$outboundSchema;
  /** @deprecated use `FeatureTransformedHistoricalData$Outbound` instead. */
  export type Outbound = FeatureTransformedHistoricalData$Outbound;
}

export function featureTransformedHistoricalDataToJSON(
  featureTransformedHistoricalData: FeatureTransformedHistoricalData,
): string {
  return JSON.stringify(
    FeatureTransformedHistoricalData$outboundSchema.parse(
      featureTransformedHistoricalData,
    ),
  );
}

export function featureTransformedHistoricalDataFromJSON(
  jsonString: string,
): SafeParseResult<FeatureTransformedHistoricalData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeatureTransformedHistoricalData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeatureTransformedHistoricalData' from JSON`,
  );
}
