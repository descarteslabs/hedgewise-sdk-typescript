/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssetForecastStrategy,
  AssetForecastStrategy$inboundSchema,
  AssetForecastStrategy$Outbound,
  AssetForecastStrategy$outboundSchema,
} from "./assetforecaststrategy.js";

export type PostAssetForecastsRequest = {
  strategy: Array<AssetForecastStrategy>;
};

/** @internal */
export const PostAssetForecastsRequest$inboundSchema: z.ZodType<
  PostAssetForecastsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  strategy: z.array(AssetForecastStrategy$inboundSchema),
});

/** @internal */
export type PostAssetForecastsRequest$Outbound = {
  strategy: Array<AssetForecastStrategy$Outbound>;
};

/** @internal */
export const PostAssetForecastsRequest$outboundSchema: z.ZodType<
  PostAssetForecastsRequest$Outbound,
  z.ZodTypeDef,
  PostAssetForecastsRequest
> = z.object({
  strategy: z.array(AssetForecastStrategy$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAssetForecastsRequest$ {
  /** @deprecated use `PostAssetForecastsRequest$inboundSchema` instead. */
  export const inboundSchema = PostAssetForecastsRequest$inboundSchema;
  /** @deprecated use `PostAssetForecastsRequest$outboundSchema` instead. */
  export const outboundSchema = PostAssetForecastsRequest$outboundSchema;
  /** @deprecated use `PostAssetForecastsRequest$Outbound` instead. */
  export type Outbound = PostAssetForecastsRequest$Outbound;
}

export function postAssetForecastsRequestToJSON(
  postAssetForecastsRequest: PostAssetForecastsRequest,
): string {
  return JSON.stringify(
    PostAssetForecastsRequest$outboundSchema.parse(postAssetForecastsRequest),
  );
}

export function postAssetForecastsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostAssetForecastsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAssetForecastsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAssetForecastsRequest' from JSON`,
  );
}
