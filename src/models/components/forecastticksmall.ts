/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ForecastTickSmall = {
  date: Date;
  targetDateContract: string;
  closePrice: number;
  interpolated?: boolean | null | undefined;
};

/** @internal */
export const ForecastTickSmall$inboundSchema: z.ZodType<
  ForecastTickSmall,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  target_date_contract: z.string(),
  close_price: z.number(),
  interpolated: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "target_date_contract": "targetDateContract",
    "close_price": "closePrice",
  });
});

/** @internal */
export type ForecastTickSmall$Outbound = {
  date: string;
  target_date_contract: string;
  close_price: number;
  interpolated?: boolean | null | undefined;
};

/** @internal */
export const ForecastTickSmall$outboundSchema: z.ZodType<
  ForecastTickSmall$Outbound,
  z.ZodTypeDef,
  ForecastTickSmall
> = z.object({
  date: z.date().transform(v => v.toISOString()),
  targetDateContract: z.string(),
  closePrice: z.number(),
  interpolated: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    targetDateContract: "target_date_contract",
    closePrice: "close_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForecastTickSmall$ {
  /** @deprecated use `ForecastTickSmall$inboundSchema` instead. */
  export const inboundSchema = ForecastTickSmall$inboundSchema;
  /** @deprecated use `ForecastTickSmall$outboundSchema` instead. */
  export const outboundSchema = ForecastTickSmall$outboundSchema;
  /** @deprecated use `ForecastTickSmall$Outbound` instead. */
  export type Outbound = ForecastTickSmall$Outbound;
}

export function forecastTickSmallToJSON(
  forecastTickSmall: ForecastTickSmall,
): string {
  return JSON.stringify(
    ForecastTickSmall$outboundSchema.parse(forecastTickSmall),
  );
}

export function forecastTickSmallFromJSON(
  jsonString: string,
): SafeParseResult<ForecastTickSmall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForecastTickSmall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForecastTickSmall' from JSON`,
  );
}
