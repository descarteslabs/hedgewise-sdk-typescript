/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssetForecastData,
  AssetForecastData$inboundSchema,
  AssetForecastData$Outbound,
  AssetForecastData$outboundSchema,
} from "./assetforecastdata.js";

export type GetStrategyForecastResponse = {
  success?: true | undefined;
  data: Array<AssetForecastData>;
};

/** @internal */
export const GetStrategyForecastResponse$inboundSchema: z.ZodType<
  GetStrategyForecastResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.literal(true).default(true).optional(),
  data: z.array(AssetForecastData$inboundSchema),
});

/** @internal */
export type GetStrategyForecastResponse$Outbound = {
  success: true;
  data: Array<AssetForecastData$Outbound>;
};

/** @internal */
export const GetStrategyForecastResponse$outboundSchema: z.ZodType<
  GetStrategyForecastResponse$Outbound,
  z.ZodTypeDef,
  GetStrategyForecastResponse
> = z.object({
  success: z.literal(true).default(true as const),
  data: z.array(AssetForecastData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStrategyForecastResponse$ {
  /** @deprecated use `GetStrategyForecastResponse$inboundSchema` instead. */
  export const inboundSchema = GetStrategyForecastResponse$inboundSchema;
  /** @deprecated use `GetStrategyForecastResponse$outboundSchema` instead. */
  export const outboundSchema = GetStrategyForecastResponse$outboundSchema;
  /** @deprecated use `GetStrategyForecastResponse$Outbound` instead. */
  export type Outbound = GetStrategyForecastResponse$Outbound;
}

export function getStrategyForecastResponseToJSON(
  getStrategyForecastResponse: GetStrategyForecastResponse,
): string {
  return JSON.stringify(
    GetStrategyForecastResponse$outboundSchema.parse(
      getStrategyForecastResponse,
    ),
  );
}

export function getStrategyForecastResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStrategyForecastResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStrategyForecastResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStrategyForecastResponse' from JSON`,
  );
}
