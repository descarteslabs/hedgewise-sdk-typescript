/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FeatureDrilldown = {
  featureCode: string;
  contribution: number;
  description: string;
};

/** @internal */
export const FeatureDrilldown$inboundSchema: z.ZodType<
  FeatureDrilldown,
  z.ZodTypeDef,
  unknown
> = z.object({
  feature_code: z.string(),
  contribution: z.number(),
  description: z.string(),
}).transform((v) => {
  return remap$(v, {
    "feature_code": "featureCode",
  });
});

/** @internal */
export type FeatureDrilldown$Outbound = {
  feature_code: string;
  contribution: number;
  description: string;
};

/** @internal */
export const FeatureDrilldown$outboundSchema: z.ZodType<
  FeatureDrilldown$Outbound,
  z.ZodTypeDef,
  FeatureDrilldown
> = z.object({
  featureCode: z.string(),
  contribution: z.number(),
  description: z.string(),
}).transform((v) => {
  return remap$(v, {
    featureCode: "feature_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeatureDrilldown$ {
  /** @deprecated use `FeatureDrilldown$inboundSchema` instead. */
  export const inboundSchema = FeatureDrilldown$inboundSchema;
  /** @deprecated use `FeatureDrilldown$outboundSchema` instead. */
  export const outboundSchema = FeatureDrilldown$outboundSchema;
  /** @deprecated use `FeatureDrilldown$Outbound` instead. */
  export type Outbound = FeatureDrilldown$Outbound;
}

export function featureDrilldownToJSON(
  featureDrilldown: FeatureDrilldown,
): string {
  return JSON.stringify(
    FeatureDrilldown$outboundSchema.parse(featureDrilldown),
  );
}

export function featureDrilldownFromJSON(
  jsonString: string,
): SafeParseResult<FeatureDrilldown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeatureDrilldown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeatureDrilldown' from JSON`,
  );
}
