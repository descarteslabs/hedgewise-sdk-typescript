/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DatasetType,
  DatasetType$inboundSchema,
  DatasetType$outboundSchema,
} from "./datasettype.js";

export type Dataset = {
  id?: string | undefined;
  key: string;
  name?: string | undefined;
  description?: string | undefined;
  /**
   * Enum for dataset types.
   */
  type?: DatasetType | undefined;
  createdAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
  publisherName?: string | undefined;
  publisherId?: string | null | undefined;
  startDate?: Date | null | undefined;
  endDate?: Date | null | undefined;
  frequency?: string | null | undefined;
};

/** @internal */
export const Dataset$inboundSchema: z.ZodType<Dataset, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    key: z.string(),
    name: z.string().optional(),
    description: z.string().optional(),
    type: DatasetType$inboundSchema.optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    publisher_name: z.string().optional(),
    publisher_id: z.nullable(z.string()).optional(),
    start_date: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    end_date: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    frequency: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "publisher_name": "publisherName",
      "publisher_id": "publisherId",
      "start_date": "startDate",
      "end_date": "endDate",
    });
  });

/** @internal */
export type Dataset$Outbound = {
  id?: string | undefined;
  key: string;
  name?: string | undefined;
  description?: string | undefined;
  type?: string | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  publisher_name?: string | undefined;
  publisher_id?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  frequency?: string | null | undefined;
};

/** @internal */
export const Dataset$outboundSchema: z.ZodType<
  Dataset$Outbound,
  z.ZodTypeDef,
  Dataset
> = z.object({
  id: z.string().optional(),
  key: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  type: DatasetType$outboundSchema.optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  publisherName: z.string().optional(),
  publisherId: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  frequency: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    publisherName: "publisher_name",
    publisherId: "publisher_id",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dataset$ {
  /** @deprecated use `Dataset$inboundSchema` instead. */
  export const inboundSchema = Dataset$inboundSchema;
  /** @deprecated use `Dataset$outboundSchema` instead. */
  export const outboundSchema = Dataset$outboundSchema;
  /** @deprecated use `Dataset$Outbound` instead. */
  export type Outbound = Dataset$Outbound;
}

export function datasetToJSON(dataset: Dataset): string {
  return JSON.stringify(Dataset$outboundSchema.parse(dataset));
}

export function datasetFromJSON(
  jsonString: string,
): SafeParseResult<Dataset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Dataset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Dataset' from JSON`,
  );
}
