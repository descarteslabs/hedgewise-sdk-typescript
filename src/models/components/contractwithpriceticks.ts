/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Tick,
  Tick$inboundSchema,
  Tick$Outbound,
  Tick$outboundSchema,
} from "./tick.js";

export type ContractWithPriceTicks = {
  assetSymbol: string;
  symbol: string;
  name: string;
  lastTick?: Tick | null | undefined;
  rolloverDate?: RFCDate | null | undefined;
  ticks: Array<Tick>;
};

/** @internal */
export const ContractWithPriceTicks$inboundSchema: z.ZodType<
  ContractWithPriceTicks,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_symbol: z.string(),
  symbol: z.string(),
  name: z.string(),
  last_tick: z.nullable(Tick$inboundSchema).optional(),
  rollover_date: z.nullable(z.string().transform(v => new RFCDate(v)))
    .optional(),
  ticks: z.array(Tick$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "asset_symbol": "assetSymbol",
    "last_tick": "lastTick",
    "rollover_date": "rolloverDate",
  });
});

/** @internal */
export type ContractWithPriceTicks$Outbound = {
  asset_symbol: string;
  symbol: string;
  name: string;
  last_tick?: Tick$Outbound | null | undefined;
  rollover_date?: string | null | undefined;
  ticks: Array<Tick$Outbound>;
};

/** @internal */
export const ContractWithPriceTicks$outboundSchema: z.ZodType<
  ContractWithPriceTicks$Outbound,
  z.ZodTypeDef,
  ContractWithPriceTicks
> = z.object({
  assetSymbol: z.string(),
  symbol: z.string(),
  name: z.string(),
  lastTick: z.nullable(Tick$outboundSchema).optional(),
  rolloverDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  ticks: z.array(Tick$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    assetSymbol: "asset_symbol",
    lastTick: "last_tick",
    rolloverDate: "rollover_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractWithPriceTicks$ {
  /** @deprecated use `ContractWithPriceTicks$inboundSchema` instead. */
  export const inboundSchema = ContractWithPriceTicks$inboundSchema;
  /** @deprecated use `ContractWithPriceTicks$outboundSchema` instead. */
  export const outboundSchema = ContractWithPriceTicks$outboundSchema;
  /** @deprecated use `ContractWithPriceTicks$Outbound` instead. */
  export type Outbound = ContractWithPriceTicks$Outbound;
}

export function contractWithPriceTicksToJSON(
  contractWithPriceTicks: ContractWithPriceTicks,
): string {
  return JSON.stringify(
    ContractWithPriceTicks$outboundSchema.parse(contractWithPriceTicks),
  );
}

export function contractWithPriceTicksFromJSON(
  jsonString: string,
): SafeParseResult<ContractWithPriceTicks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractWithPriceTicks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractWithPriceTicks' from JSON`,
  );
}
