/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssetForecastData,
  AssetForecastData$inboundSchema,
  AssetForecastData$Outbound,
  AssetForecastData$outboundSchema,
} from "./assetforecastdata.js";
import {
  AssetForecastSmallData,
  AssetForecastSmallData$inboundSchema,
  AssetForecastSmallData$Outbound,
  AssetForecastSmallData$outboundSchema,
} from "./assetforecastsmalldata.js";

export type DataUnion = AssetForecastData | AssetForecastSmallData;

export type PostAssetForecastsResponse = {
  success?: true | undefined;
  data: Array<AssetForecastData | AssetForecastSmallData>;
};

/** @internal */
export const DataUnion$inboundSchema: z.ZodType<
  DataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  AssetForecastData$inboundSchema,
  AssetForecastSmallData$inboundSchema,
]);

/** @internal */
export type DataUnion$Outbound =
  | AssetForecastData$Outbound
  | AssetForecastSmallData$Outbound;

/** @internal */
export const DataUnion$outboundSchema: z.ZodType<
  DataUnion$Outbound,
  z.ZodTypeDef,
  DataUnion
> = z.union([
  AssetForecastData$outboundSchema,
  AssetForecastSmallData$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataUnion$ {
  /** @deprecated use `DataUnion$inboundSchema` instead. */
  export const inboundSchema = DataUnion$inboundSchema;
  /** @deprecated use `DataUnion$outboundSchema` instead. */
  export const outboundSchema = DataUnion$outboundSchema;
  /** @deprecated use `DataUnion$Outbound` instead. */
  export type Outbound = DataUnion$Outbound;
}

export function dataUnionToJSON(dataUnion: DataUnion): string {
  return JSON.stringify(DataUnion$outboundSchema.parse(dataUnion));
}

export function dataUnionFromJSON(
  jsonString: string,
): SafeParseResult<DataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataUnion' from JSON`,
  );
}

/** @internal */
export const PostAssetForecastsResponse$inboundSchema: z.ZodType<
  PostAssetForecastsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.literal(true).default(true).optional(),
  data: z.array(
    z.union([
      AssetForecastData$inboundSchema,
      AssetForecastSmallData$inboundSchema,
    ]),
  ),
});

/** @internal */
export type PostAssetForecastsResponse$Outbound = {
  success: true;
  data: Array<AssetForecastData$Outbound | AssetForecastSmallData$Outbound>;
};

/** @internal */
export const PostAssetForecastsResponse$outboundSchema: z.ZodType<
  PostAssetForecastsResponse$Outbound,
  z.ZodTypeDef,
  PostAssetForecastsResponse
> = z.object({
  success: z.literal(true).default(true as const),
  data: z.array(
    z.union([
      AssetForecastData$outboundSchema,
      AssetForecastSmallData$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAssetForecastsResponse$ {
  /** @deprecated use `PostAssetForecastsResponse$inboundSchema` instead. */
  export const inboundSchema = PostAssetForecastsResponse$inboundSchema;
  /** @deprecated use `PostAssetForecastsResponse$outboundSchema` instead. */
  export const outboundSchema = PostAssetForecastsResponse$outboundSchema;
  /** @deprecated use `PostAssetForecastsResponse$Outbound` instead. */
  export type Outbound = PostAssetForecastsResponse$Outbound;
}

export function postAssetForecastsResponseToJSON(
  postAssetForecastsResponse: PostAssetForecastsResponse,
): string {
  return JSON.stringify(
    PostAssetForecastsResponse$outboundSchema.parse(postAssetForecastsResponse),
  );
}

export function postAssetForecastsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostAssetForecastsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAssetForecastsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAssetForecastsResponse' from JSON`,
  );
}
