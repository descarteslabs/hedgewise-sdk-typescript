/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Asset,
  Asset$inboundSchema,
  Asset$Outbound,
  Asset$outboundSchema,
} from "./asset.js";
import {
  ContractWithForecastsSmall,
  ContractWithForecastsSmall$inboundSchema,
  ContractWithForecastsSmall$Outbound,
  ContractWithForecastsSmall$outboundSchema,
} from "./contractwithforecastssmall.js";

export type AssetForecastSmallData = {
  asset: Asset;
  contracts: Array<ContractWithForecastsSmall>;
};

/** @internal */
export const AssetForecastSmallData$inboundSchema: z.ZodType<
  AssetForecastSmallData,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset: Asset$inboundSchema,
  contracts: z.array(ContractWithForecastsSmall$inboundSchema),
});

/** @internal */
export type AssetForecastSmallData$Outbound = {
  asset: Asset$Outbound;
  contracts: Array<ContractWithForecastsSmall$Outbound>;
};

/** @internal */
export const AssetForecastSmallData$outboundSchema: z.ZodType<
  AssetForecastSmallData$Outbound,
  z.ZodTypeDef,
  AssetForecastSmallData
> = z.object({
  asset: Asset$outboundSchema,
  contracts: z.array(ContractWithForecastsSmall$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetForecastSmallData$ {
  /** @deprecated use `AssetForecastSmallData$inboundSchema` instead. */
  export const inboundSchema = AssetForecastSmallData$inboundSchema;
  /** @deprecated use `AssetForecastSmallData$outboundSchema` instead. */
  export const outboundSchema = AssetForecastSmallData$outboundSchema;
  /** @deprecated use `AssetForecastSmallData$Outbound` instead. */
  export type Outbound = AssetForecastSmallData$Outbound;
}

export function assetForecastSmallDataToJSON(
  assetForecastSmallData: AssetForecastSmallData,
): string {
  return JSON.stringify(
    AssetForecastSmallData$outboundSchema.parse(assetForecastSmallData),
  );
}

export function assetForecastSmallDataFromJSON(
  jsonString: string,
): SafeParseResult<AssetForecastSmallData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetForecastSmallData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetForecastSmallData' from JSON`,
  );
}
