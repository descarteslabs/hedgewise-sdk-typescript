/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StrategyResponse,
  StrategyResponse$inboundSchema,
  StrategyResponse$Outbound,
  StrategyResponse$outboundSchema,
} from "./strategyresponse.js";

export type GetStrategiesResponse = {
  success?: true | undefined;
  data: Array<StrategyResponse>;
};

/** @internal */
export const GetStrategiesResponse$inboundSchema: z.ZodType<
  GetStrategiesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.literal(true).default(true).optional(),
  data: z.array(StrategyResponse$inboundSchema),
});

/** @internal */
export type GetStrategiesResponse$Outbound = {
  success: true;
  data: Array<StrategyResponse$Outbound>;
};

/** @internal */
export const GetStrategiesResponse$outboundSchema: z.ZodType<
  GetStrategiesResponse$Outbound,
  z.ZodTypeDef,
  GetStrategiesResponse
> = z.object({
  success: z.literal(true).default(true as const),
  data: z.array(StrategyResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStrategiesResponse$ {
  /** @deprecated use `GetStrategiesResponse$inboundSchema` instead. */
  export const inboundSchema = GetStrategiesResponse$inboundSchema;
  /** @deprecated use `GetStrategiesResponse$outboundSchema` instead. */
  export const outboundSchema = GetStrategiesResponse$outboundSchema;
  /** @deprecated use `GetStrategiesResponse$Outbound` instead. */
  export type Outbound = GetStrategiesResponse$Outbound;
}

export function getStrategiesResponseToJSON(
  getStrategiesResponse: GetStrategiesResponse,
): string {
  return JSON.stringify(
    GetStrategiesResponse$outboundSchema.parse(getStrategiesResponse),
  );
}

export function getStrategiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStrategiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStrategiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStrategiesResponse' from JSON`,
  );
}
