/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Tick,
  Tick$inboundSchema,
  Tick$Outbound,
  Tick$outboundSchema,
} from "./tick.js";

export type Contract = {
  assetSymbol: string;
  symbol: string;
  name: string;
  lastTick?: Tick | null | undefined;
};

/** @internal */
export const Contract$inboundSchema: z.ZodType<
  Contract,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_symbol: z.string(),
  symbol: z.string(),
  name: z.string(),
  last_tick: z.nullable(Tick$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "asset_symbol": "assetSymbol",
    "last_tick": "lastTick",
  });
});

/** @internal */
export type Contract$Outbound = {
  asset_symbol: string;
  symbol: string;
  name: string;
  last_tick?: Tick$Outbound | null | undefined;
};

/** @internal */
export const Contract$outboundSchema: z.ZodType<
  Contract$Outbound,
  z.ZodTypeDef,
  Contract
> = z.object({
  assetSymbol: z.string(),
  symbol: z.string(),
  name: z.string(),
  lastTick: z.nullable(Tick$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    assetSymbol: "asset_symbol",
    lastTick: "last_tick",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contract$ {
  /** @deprecated use `Contract$inboundSchema` instead. */
  export const inboundSchema = Contract$inboundSchema;
  /** @deprecated use `Contract$outboundSchema` instead. */
  export const outboundSchema = Contract$outboundSchema;
  /** @deprecated use `Contract$Outbound` instead. */
  export type Outbound = Contract$Outbound;
}

export function contractToJSON(contract: Contract): string {
  return JSON.stringify(Contract$outboundSchema.parse(contract));
}

export function contractFromJSON(
  jsonString: string,
): SafeParseResult<Contract, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contract$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contract' from JSON`,
  );
}
