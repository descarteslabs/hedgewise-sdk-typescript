/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUserRegistrationReponse = {
  success?: true | undefined;
  data: { [k: string]: any };
};

/** @internal */
export const GetUserRegistrationReponse$inboundSchema: z.ZodType<
  GetUserRegistrationReponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.literal(true).optional(),
  data: z.record(z.any()),
});

/** @internal */
export type GetUserRegistrationReponse$Outbound = {
  success: true;
  data: { [k: string]: any };
};

/** @internal */
export const GetUserRegistrationReponse$outboundSchema: z.ZodType<
  GetUserRegistrationReponse$Outbound,
  z.ZodTypeDef,
  GetUserRegistrationReponse
> = z.object({
  success: z.literal(true).default(true as const),
  data: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserRegistrationReponse$ {
  /** @deprecated use `GetUserRegistrationReponse$inboundSchema` instead. */
  export const inboundSchema = GetUserRegistrationReponse$inboundSchema;
  /** @deprecated use `GetUserRegistrationReponse$outboundSchema` instead. */
  export const outboundSchema = GetUserRegistrationReponse$outboundSchema;
  /** @deprecated use `GetUserRegistrationReponse$Outbound` instead. */
  export type Outbound = GetUserRegistrationReponse$Outbound;
}

export function getUserRegistrationReponseToJSON(
  getUserRegistrationReponse: GetUserRegistrationReponse,
): string {
  return JSON.stringify(
    GetUserRegistrationReponse$outboundSchema.parse(getUserRegistrationReponse),
  );
}

export function getUserRegistrationReponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserRegistrationReponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserRegistrationReponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserRegistrationReponse' from JSON`,
  );
}
