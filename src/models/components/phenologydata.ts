/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PhenologyData = {
  location: string;
  crop: string;
  phenologyPhase: string;
  start: RFCDate;
  end: RFCDate;
};

/** @internal */
export const PhenologyData$inboundSchema: z.ZodType<
  PhenologyData,
  z.ZodTypeDef,
  unknown
> = z.object({
  location: z.string(),
  crop: z.string(),
  phenology_phase: z.string(),
  start: z.string().transform(v => new RFCDate(v)),
  end: z.string().transform(v => new RFCDate(v)),
}).transform((v) => {
  return remap$(v, {
    "phenology_phase": "phenologyPhase",
  });
});

/** @internal */
export type PhenologyData$Outbound = {
  location: string;
  crop: string;
  phenology_phase: string;
  start: string;
  end: string;
};

/** @internal */
export const PhenologyData$outboundSchema: z.ZodType<
  PhenologyData$Outbound,
  z.ZodTypeDef,
  PhenologyData
> = z.object({
  location: z.string(),
  crop: z.string(),
  phenologyPhase: z.string(),
  start: z.instanceof(RFCDate).transform(v => v.toString()),
  end: z.instanceof(RFCDate).transform(v => v.toString()),
}).transform((v) => {
  return remap$(v, {
    phenologyPhase: "phenology_phase",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhenologyData$ {
  /** @deprecated use `PhenologyData$inboundSchema` instead. */
  export const inboundSchema = PhenologyData$inboundSchema;
  /** @deprecated use `PhenologyData$outboundSchema` instead. */
  export const outboundSchema = PhenologyData$outboundSchema;
  /** @deprecated use `PhenologyData$Outbound` instead. */
  export type Outbound = PhenologyData$Outbound;
}

export function phenologyDataToJSON(phenologyData: PhenologyData): string {
  return JSON.stringify(PhenologyData$outboundSchema.parse(phenologyData));
}

export function phenologyDataFromJSON(
  jsonString: string,
): SafeParseResult<PhenologyData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhenologyData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhenologyData' from JSON`,
  );
}
