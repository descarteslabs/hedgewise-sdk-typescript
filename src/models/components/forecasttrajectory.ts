/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Number of days to forecast.
 */
export type Horizon = number | string;

export type ForecastTrajectory = {
  /**
   * Specific model to use for forecast window.
   */
  model: string;
  /**
   * Number of days to forecast.
   */
  horizon: number | string;
};

/** @internal */
export const Horizon$inboundSchema: z.ZodType<Horizon, z.ZodTypeDef, unknown> =
  z.union([z.number().int(), z.string()]);

/** @internal */
export type Horizon$Outbound = number | string;

/** @internal */
export const Horizon$outboundSchema: z.ZodType<
  Horizon$Outbound,
  z.ZodTypeDef,
  Horizon
> = z.union([z.number().int(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Horizon$ {
  /** @deprecated use `Horizon$inboundSchema` instead. */
  export const inboundSchema = Horizon$inboundSchema;
  /** @deprecated use `Horizon$outboundSchema` instead. */
  export const outboundSchema = Horizon$outboundSchema;
  /** @deprecated use `Horizon$Outbound` instead. */
  export type Outbound = Horizon$Outbound;
}

export function horizonToJSON(horizon: Horizon): string {
  return JSON.stringify(Horizon$outboundSchema.parse(horizon));
}

export function horizonFromJSON(
  jsonString: string,
): SafeParseResult<Horizon, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Horizon$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Horizon' from JSON`,
  );
}

/** @internal */
export const ForecastTrajectory$inboundSchema: z.ZodType<
  ForecastTrajectory,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  horizon: z.union([z.number().int(), z.string()]),
});

/** @internal */
export type ForecastTrajectory$Outbound = {
  model: string;
  horizon: number | string;
};

/** @internal */
export const ForecastTrajectory$outboundSchema: z.ZodType<
  ForecastTrajectory$Outbound,
  z.ZodTypeDef,
  ForecastTrajectory
> = z.object({
  model: z.string(),
  horizon: z.union([z.number().int(), z.string()]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForecastTrajectory$ {
  /** @deprecated use `ForecastTrajectory$inboundSchema` instead. */
  export const inboundSchema = ForecastTrajectory$inboundSchema;
  /** @deprecated use `ForecastTrajectory$outboundSchema` instead. */
  export const outboundSchema = ForecastTrajectory$outboundSchema;
  /** @deprecated use `ForecastTrajectory$Outbound` instead. */
  export type Outbound = ForecastTrajectory$Outbound;
}

export function forecastTrajectoryToJSON(
  forecastTrajectory: ForecastTrajectory,
): string {
  return JSON.stringify(
    ForecastTrajectory$outboundSchema.parse(forecastTrajectory),
  );
}

export function forecastTrajectoryFromJSON(
  jsonString: string,
): SafeParseResult<ForecastTrajectory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForecastTrajectory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForecastTrajectory' from JSON`,
  );
}
