/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MovingAverageTick,
  MovingAverageTick$inboundSchema,
  MovingAverageTick$Outbound,
  MovingAverageTick$outboundSchema,
} from "./movingaveragetick.js";

export type MovingAverage = {
  horizon: number;
  movingAverage: Array<MovingAverageTick>;
};

/** @internal */
export const MovingAverage$inboundSchema: z.ZodType<
  MovingAverage,
  z.ZodTypeDef,
  unknown
> = z.object({
  horizon: z.number().int(),
  moving_average: z.array(MovingAverageTick$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "moving_average": "movingAverage",
  });
});

/** @internal */
export type MovingAverage$Outbound = {
  horizon: number;
  moving_average: Array<MovingAverageTick$Outbound>;
};

/** @internal */
export const MovingAverage$outboundSchema: z.ZodType<
  MovingAverage$Outbound,
  z.ZodTypeDef,
  MovingAverage
> = z.object({
  horizon: z.number().int(),
  movingAverage: z.array(MovingAverageTick$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    movingAverage: "moving_average",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovingAverage$ {
  /** @deprecated use `MovingAverage$inboundSchema` instead. */
  export const inboundSchema = MovingAverage$inboundSchema;
  /** @deprecated use `MovingAverage$outboundSchema` instead. */
  export const outboundSchema = MovingAverage$outboundSchema;
  /** @deprecated use `MovingAverage$Outbound` instead. */
  export type Outbound = MovingAverage$Outbound;
}

export function movingAverageToJSON(movingAverage: MovingAverage): string {
  return JSON.stringify(MovingAverage$outboundSchema.parse(movingAverage));
}

export function movingAverageFromJSON(
  jsonString: string,
): SafeParseResult<MovingAverage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MovingAverage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MovingAverage' from JSON`,
  );
}
