/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTransformedFeatureValuesRequest = {
  /**
   * Feature code
   */
  featureCode: string;
  /**
   * The type of transform requested. Currently supported are `xyavg`, `rebase`, `zscore`, `yoy`
   */
  transform: string;
  /**
   * Number of years to perform the average on. (valid for xyavg and yoy transforms)
   */
  numberOfYears?: number | undefined;
  /**
   * Number of observations used in the transformation window. (valid for xyavg and zscore transforms)
   */
  window?: number | undefined;
  /**
   * Start of transformed feature data window (YYYY-MM-DD) - not relevant for yoy
   */
  startDate?: string | null | undefined;
  /**
   * End of transformed feature data window (YYYY-MM-DD) - not relevant for yoy
   */
  endDate?: string | null | undefined;
  /**
   * By default, time-series are returned using daily time frequency. Request resampled data using `weekly` or `monthly` as query parameter
   */
  freq?: string | null | undefined;
  /**
   * If a `weekly` or `monthly` frequency is requested, this parameter allows to control how the returned data is aggregated over each period. `mean` and `last` are supported
   */
  agg?: string | null | undefined;
};

/** @internal */
export const GetTransformedFeatureValuesRequest$inboundSchema: z.ZodType<
  GetTransformedFeatureValuesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  feature_code: z.string(),
  transform: z.string(),
  number_of_years: z.number().int().default(5),
  window: z.number().int().default(20),
  start_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  freq: z.nullable(z.string()).optional(),
  agg: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "feature_code": "featureCode",
    "number_of_years": "numberOfYears",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type GetTransformedFeatureValuesRequest$Outbound = {
  feature_code: string;
  transform: string;
  number_of_years: number;
  window: number;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  freq?: string | null | undefined;
  agg?: string | null | undefined;
};

/** @internal */
export const GetTransformedFeatureValuesRequest$outboundSchema: z.ZodType<
  GetTransformedFeatureValuesRequest$Outbound,
  z.ZodTypeDef,
  GetTransformedFeatureValuesRequest
> = z.object({
  featureCode: z.string(),
  transform: z.string(),
  numberOfYears: z.number().int().default(5),
  window: z.number().int().default(20),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  freq: z.nullable(z.string()).optional(),
  agg: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    featureCode: "feature_code",
    numberOfYears: "number_of_years",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransformedFeatureValuesRequest$ {
  /** @deprecated use `GetTransformedFeatureValuesRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransformedFeatureValuesRequest$inboundSchema;
  /** @deprecated use `GetTransformedFeatureValuesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTransformedFeatureValuesRequest$outboundSchema;
  /** @deprecated use `GetTransformedFeatureValuesRequest$Outbound` instead. */
  export type Outbound = GetTransformedFeatureValuesRequest$Outbound;
}

export function getTransformedFeatureValuesRequestToJSON(
  getTransformedFeatureValuesRequest: GetTransformedFeatureValuesRequest,
): string {
  return JSON.stringify(
    GetTransformedFeatureValuesRequest$outboundSchema.parse(
      getTransformedFeatureValuesRequest,
    ),
  );
}

export function getTransformedFeatureValuesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransformedFeatureValuesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransformedFeatureValuesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransformedFeatureValuesRequest' from JSON`,
  );
}
