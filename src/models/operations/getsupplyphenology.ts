/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSupplyPhenologyRequest = {
  /**
   * Asset symbol
   */
  symbol: string;
  /**
   * Country name or region
   */
  countryRegion?: string | null | undefined;
};

/** @internal */
export const GetSupplyPhenologyRequest$inboundSchema: z.ZodType<
  GetSupplyPhenologyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  symbol: z.string(),
  country_region: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_region": "countryRegion",
  });
});

/** @internal */
export type GetSupplyPhenologyRequest$Outbound = {
  symbol: string;
  country_region?: string | null | undefined;
};

/** @internal */
export const GetSupplyPhenologyRequest$outboundSchema: z.ZodType<
  GetSupplyPhenologyRequest$Outbound,
  z.ZodTypeDef,
  GetSupplyPhenologyRequest
> = z.object({
  symbol: z.string(),
  countryRegion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    countryRegion: "country_region",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSupplyPhenologyRequest$ {
  /** @deprecated use `GetSupplyPhenologyRequest$inboundSchema` instead. */
  export const inboundSchema = GetSupplyPhenologyRequest$inboundSchema;
  /** @deprecated use `GetSupplyPhenologyRequest$outboundSchema` instead. */
  export const outboundSchema = GetSupplyPhenologyRequest$outboundSchema;
  /** @deprecated use `GetSupplyPhenologyRequest$Outbound` instead. */
  export type Outbound = GetSupplyPhenologyRequest$Outbound;
}

export function getSupplyPhenologyRequestToJSON(
  getSupplyPhenologyRequest: GetSupplyPhenologyRequest,
): string {
  return JSON.stringify(
    GetSupplyPhenologyRequest$outboundSchema.parse(getSupplyPhenologyRequest),
  );
}

export function getSupplyPhenologyRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSupplyPhenologyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSupplyPhenologyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSupplyPhenologyRequest' from JSON`,
  );
}
