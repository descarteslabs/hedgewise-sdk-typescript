/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStrategyForecastRequest = {
  /**
   * Strategy UUID id
   */
  strategyId: string;
  /**
   * Return a concatenated version of the requested trajectories as if it was coming from a single model. Some restrictions apply
   */
  concatenateTrajectories?: boolean | undefined;
};

/** @internal */
export const GetStrategyForecastRequest$inboundSchema: z.ZodType<
  GetStrategyForecastRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  strategy_id: z.string(),
  concatenate_trajectories: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "strategy_id": "strategyId",
    "concatenate_trajectories": "concatenateTrajectories",
  });
});

/** @internal */
export type GetStrategyForecastRequest$Outbound = {
  strategy_id: string;
  concatenate_trajectories: boolean;
};

/** @internal */
export const GetStrategyForecastRequest$outboundSchema: z.ZodType<
  GetStrategyForecastRequest$Outbound,
  z.ZodTypeDef,
  GetStrategyForecastRequest
> = z.object({
  strategyId: z.string(),
  concatenateTrajectories: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    strategyId: "strategy_id",
    concatenateTrajectories: "concatenate_trajectories",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStrategyForecastRequest$ {
  /** @deprecated use `GetStrategyForecastRequest$inboundSchema` instead. */
  export const inboundSchema = GetStrategyForecastRequest$inboundSchema;
  /** @deprecated use `GetStrategyForecastRequest$outboundSchema` instead. */
  export const outboundSchema = GetStrategyForecastRequest$outboundSchema;
  /** @deprecated use `GetStrategyForecastRequest$Outbound` instead. */
  export type Outbound = GetStrategyForecastRequest$Outbound;
}

export function getStrategyForecastRequestToJSON(
  getStrategyForecastRequest: GetStrategyForecastRequest,
): string {
  return JSON.stringify(
    GetStrategyForecastRequest$outboundSchema.parse(getStrategyForecastRequest),
  );
}

export function getStrategyForecastRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStrategyForecastRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStrategyForecastRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStrategyForecastRequest' from JSON`,
  );
}
