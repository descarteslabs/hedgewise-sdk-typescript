/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest = {
  /**
   * Future symbol
   */
  symbol: string;
  /**
   * Contract year and month. _Default value_ : All
   *
   * @remarks
   *                 available contracts
   */
  contract?: string | null | undefined;
  /**
   * Start of prices window (YYYY-MM-DD). The returned object will
   *
   * @remarks
   *                 contain the entire price history for every contract that traded between
   *                 `start_date` and `end_date`. Ignored if `contract` is specified. _Default
   *                 value_ : most recent date with prices
   */
  startDate?: RFCDate | null | undefined;
  /**
   * End of prices window (YYYY-MM-DD). The returned object will
   *
   * @remarks
   *                 contain the entire price history for every contract that traded between
   *                 `start_date` and `end_date`. Ignored if `contract` is specified. _Default
   *                 value_ : most recent date with prices
   */
  endDate?: RFCDate | null | undefined;
  /**
   * Return price data for currently active contracts
   *
   * @remarks
   *                 only. Set to false to also retrieve price data from expired
   *                 contracts.
   */
  activeContractsOnly?: boolean | undefined;
  /**
   * The rollover date is the most recent date for which a given
   *
   * @remarks
   *                 contract was trading as the front month. This parameter specifies the method
   *                 used to determine the rollover date for contracts. Must be one of "hist_vol",
   *                 "max_vol", "first_notice", or "last_trade" (or left blank for no rollover
   *                 calculation). "first_notice" not available for all commodities, and defaults
   *                 to "last_trade".
   */
  rolloverMethod?: string | undefined;
  /**
   * Back-adjust prices to account for calendar spread at contract
   *
   * @remarks
   *             rollover dates. The method used is described here:
   *             https://www.sierrachart.com/index.php?page=doc/ContinuousFuturesContractCharts.html#ContinuousFuturesContractDateRuleRolloverBackAdjusted
   */
  backAdjust?: boolean | undefined;
};

/** @internal */
export const GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$inboundSchema:
  z.ZodType<
    GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    symbol: z.string(),
    contract: z.nullable(z.string()).optional(),
    start_date: z.nullable(z.string().transform(v => new RFCDate(v)))
      .optional(),
    end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    active_contracts_only: z.boolean().default(true),
    rollover_method: z.string().default("hist_vol"),
    back_adjust: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "start_date": "startDate",
      "end_date": "endDate",
      "active_contracts_only": "activeContractsOnly",
      "rollover_method": "rolloverMethod",
      "back_adjust": "backAdjust",
    });
  });

/** @internal */
export type GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$Outbound =
  {
    symbol: string;
    contract?: string | null | undefined;
    start_date?: string | null | undefined;
    end_date?: string | null | undefined;
    active_contracts_only: boolean;
    rollover_method: string;
    back_adjust: boolean;
  };

/** @internal */
export const GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$outboundSchema:
  z.ZodType<
    GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$Outbound,
    z.ZodTypeDef,
    GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest
  > = z.object({
    symbol: z.string(),
    contract: z.nullable(z.string()).optional(),
    startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    activeContractsOnly: z.boolean().default(true),
    rolloverMethod: z.string().default("hist_vol"),
    backAdjust: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      startDate: "start_date",
      endDate: "end_date",
      activeContractsOnly: "active_contracts_only",
      rolloverMethod: "rollover_method",
      backAdjust: "back_adjust",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$ {
  /** @deprecated use `GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$inboundSchema;
  /** @deprecated use `GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$outboundSchema;
  /** @deprecated use `GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$Outbound` instead. */
  export type Outbound =
    GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$Outbound;
}

export function getFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequestToJSON(
  getFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest:
    GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest,
): string {
  return JSON.stringify(
    GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$outboundSchema
      .parse(getFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest),
  );
}

export function getFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest' from JSON`,
  );
}
