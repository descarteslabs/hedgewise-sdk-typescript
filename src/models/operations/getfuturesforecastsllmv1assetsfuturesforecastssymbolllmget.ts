/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest =
  {
    /**
     * Future symbol
     */
    symbol: string;
    /**
     * Contract year and month. _Default value_ : All
     *
     * @remarks
     *                 available contracts
     */
    contract?: string | null | undefined;
    /**
     * Start of forecast window (YYYY-MM-DD). The returned object will
     *
     * @remarks
     *                 contain forecasts for every contract that traded between
     *                 `start_date` and `end_date`. Ignored if `contract` is specified. _Default
     *                 value_ : most recent date with forecasts
     */
    startDate?: RFCDate | null | undefined;
    /**
     * End of forecast window (YYYY-MM-DD). The returned object will
     *
     * @remarks
     *                 contain forecasts for every contract that traded between
     *                 `start_date` and `end_date`. Ignored if `contract` is specified. _Default
     *                 value_ : most recent date with forecasts
     */
    endDate?: RFCDate | null | undefined;
    /**
     * Return uncertainty estimates for each forecast.
     */
    estimateUncertainty?: boolean | undefined;
    /**
     * Return market drivers for each forecast.
     */
    getMarketDrivers?: boolean | undefined;
    /**
     * Return moving averages for each forecast.
     */
    getMovingAverages?: boolean | undefined;
    /**
     * Apply an empirical price collar to the forecasts. This regulates the forecast when it suggests implausibly large price changes. A smaller number results in a more aggressive collar. Must be a positive number.
     */
    priceCollarSigma?: number | undefined;
    /**
     * Select a specific data model to use when generating a forecast for a future symbol.
     */
    modelName?: string | null | undefined;
  };

/** @internal */
export const GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$inboundSchema:
  z.ZodType<
    GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    symbol: z.string(),
    contract: z.nullable(z.string()).optional(),
    start_date: z.nullable(z.string().transform(v => new RFCDate(v)))
      .optional(),
    end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    estimate_uncertainty: z.boolean().default(true),
    get_market_drivers: z.boolean().default(false),
    get_moving_averages: z.boolean().default(false),
    price_collar_sigma: z.number().default(0),
    model_name: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "start_date": "startDate",
      "end_date": "endDate",
      "estimate_uncertainty": "estimateUncertainty",
      "get_market_drivers": "getMarketDrivers",
      "get_moving_averages": "getMovingAverages",
      "price_collar_sigma": "priceCollarSigma",
      "model_name": "modelName",
    });
  });

/** @internal */
export type GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$Outbound =
  {
    symbol: string;
    contract?: string | null | undefined;
    start_date?: string | null | undefined;
    end_date?: string | null | undefined;
    estimate_uncertainty: boolean;
    get_market_drivers: boolean;
    get_moving_averages: boolean;
    price_collar_sigma: number;
    model_name?: string | null | undefined;
  };

/** @internal */
export const GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$outboundSchema:
  z.ZodType<
    GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$Outbound,
    z.ZodTypeDef,
    GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest
  > = z.object({
    symbol: z.string(),
    contract: z.nullable(z.string()).optional(),
    startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    estimateUncertainty: z.boolean().default(true),
    getMarketDrivers: z.boolean().default(false),
    getMovingAverages: z.boolean().default(false),
    priceCollarSigma: z.number().default(0),
    modelName: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      startDate: "start_date",
      endDate: "end_date",
      estimateUncertainty: "estimate_uncertainty",
      getMarketDrivers: "get_market_drivers",
      getMovingAverages: "get_moving_averages",
      priceCollarSigma: "price_collar_sigma",
      modelName: "model_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$ {
  /** @deprecated use `GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$inboundSchema;
  /** @deprecated use `GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$outboundSchema;
  /** @deprecated use `GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$Outbound` instead. */
  export type Outbound =
    GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$Outbound;
}

export function getFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequestToJSON(
  getFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest:
    GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest,
): string {
  return JSON.stringify(
    GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$outboundSchema
      .parse(getFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest),
  );
}

export function getFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest' from JSON`,
  );
}
