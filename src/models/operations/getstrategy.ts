/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStrategyRequest = {
  /**
   * Strategy UUID id
   */
  strategyId: string;
  includeRelationships?: boolean | undefined;
};

/** @internal */
export const GetStrategyRequest$inboundSchema: z.ZodType<
  GetStrategyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  strategy_id: z.string(),
  include_relationships: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "strategy_id": "strategyId",
    "include_relationships": "includeRelationships",
  });
});

/** @internal */
export type GetStrategyRequest$Outbound = {
  strategy_id: string;
  include_relationships: boolean;
};

/** @internal */
export const GetStrategyRequest$outboundSchema: z.ZodType<
  GetStrategyRequest$Outbound,
  z.ZodTypeDef,
  GetStrategyRequest
> = z.object({
  strategyId: z.string(),
  includeRelationships: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    strategyId: "strategy_id",
    includeRelationships: "include_relationships",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStrategyRequest$ {
  /** @deprecated use `GetStrategyRequest$inboundSchema` instead. */
  export const inboundSchema = GetStrategyRequest$inboundSchema;
  /** @deprecated use `GetStrategyRequest$outboundSchema` instead. */
  export const outboundSchema = GetStrategyRequest$outboundSchema;
  /** @deprecated use `GetStrategyRequest$Outbound` instead. */
  export type Outbound = GetStrategyRequest$Outbound;
}

export function getStrategyRequestToJSON(
  getStrategyRequest: GetStrategyRequest,
): string {
  return JSON.stringify(
    GetStrategyRequest$outboundSchema.parse(getStrategyRequest),
  );
}

export function getStrategyRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStrategyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStrategyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStrategyRequest' from JSON`,
  );
}
