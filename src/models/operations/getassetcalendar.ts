/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAssetCalendarRequest = {
  /**
   * Future symbol
   */
  symbol: string;
  /**
   * Start of trading calendar window (YYYY-MM-DD)
   */
  startDate?: string | null | undefined;
  /**
   * End of trading calendar window (YYYY-MM-DD)
   */
  endDate?: string | null | undefined;
};

/** @internal */
export const GetAssetCalendarRequest$inboundSchema: z.ZodType<
  GetAssetCalendarRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  symbol: z.string(),
  start_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type GetAssetCalendarRequest$Outbound = {
  symbol: string;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const GetAssetCalendarRequest$outboundSchema: z.ZodType<
  GetAssetCalendarRequest$Outbound,
  z.ZodTypeDef,
  GetAssetCalendarRequest
> = z.object({
  symbol: z.string(),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssetCalendarRequest$ {
  /** @deprecated use `GetAssetCalendarRequest$inboundSchema` instead. */
  export const inboundSchema = GetAssetCalendarRequest$inboundSchema;
  /** @deprecated use `GetAssetCalendarRequest$outboundSchema` instead. */
  export const outboundSchema = GetAssetCalendarRequest$outboundSchema;
  /** @deprecated use `GetAssetCalendarRequest$Outbound` instead. */
  export type Outbound = GetAssetCalendarRequest$Outbound;
}

export function getAssetCalendarRequestToJSON(
  getAssetCalendarRequest: GetAssetCalendarRequest,
): string {
  return JSON.stringify(
    GetAssetCalendarRequest$outboundSchema.parse(getAssetCalendarRequest),
  );
}

export function getAssetCalendarRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAssetCalendarRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssetCalendarRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssetCalendarRequest' from JSON`,
  );
}
