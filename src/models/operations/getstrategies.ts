/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStrategiesRequest = {
  includeRelationships?: boolean | undefined;
  /**
   * Optional filter by strategy name
   */
  strategyName?: string | null | undefined;
};

/** @internal */
export const GetStrategiesRequest$inboundSchema: z.ZodType<
  GetStrategiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_relationships: z.boolean().default(true),
  strategy_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "include_relationships": "includeRelationships",
    "strategy_name": "strategyName",
  });
});

/** @internal */
export type GetStrategiesRequest$Outbound = {
  include_relationships: boolean;
  strategy_name?: string | null | undefined;
};

/** @internal */
export const GetStrategiesRequest$outboundSchema: z.ZodType<
  GetStrategiesRequest$Outbound,
  z.ZodTypeDef,
  GetStrategiesRequest
> = z.object({
  includeRelationships: z.boolean().default(true),
  strategyName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    includeRelationships: "include_relationships",
    strategyName: "strategy_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStrategiesRequest$ {
  /** @deprecated use `GetStrategiesRequest$inboundSchema` instead. */
  export const inboundSchema = GetStrategiesRequest$inboundSchema;
  /** @deprecated use `GetStrategiesRequest$outboundSchema` instead. */
  export const outboundSchema = GetStrategiesRequest$outboundSchema;
  /** @deprecated use `GetStrategiesRequest$Outbound` instead. */
  export type Outbound = GetStrategiesRequest$Outbound;
}

export function getStrategiesRequestToJSON(
  getStrategiesRequest: GetStrategiesRequest,
): string {
  return JSON.stringify(
    GetStrategiesRequest$outboundSchema.parse(getStrategiesRequest),
  );
}

export function getStrategiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStrategiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStrategiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStrategiesRequest' from JSON`,
  );
}
