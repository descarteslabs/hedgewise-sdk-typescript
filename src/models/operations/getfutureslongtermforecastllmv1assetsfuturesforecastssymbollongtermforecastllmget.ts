/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest =
  {
    /**
     * Future symbol
     */
    symbol: string;
    rolloverMethod?: string | undefined;
  };

/** @internal */
export const GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$inboundSchema:
  z.ZodType<
    GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    symbol: z.string(),
    rollover_method: z.string().default("hist_vol"),
  }).transform((v) => {
    return remap$(v, {
      "rollover_method": "rolloverMethod",
    });
  });

/** @internal */
export type GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$Outbound =
  {
    symbol: string;
    rollover_method: string;
  };

/** @internal */
export const GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$outboundSchema:
  z.ZodType<
    GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$Outbound,
    z.ZodTypeDef,
    GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest
  > = z.object({
    symbol: z.string(),
    rolloverMethod: z.string().default("hist_vol"),
  }).transform((v) => {
    return remap$(v, {
      rolloverMethod: "rollover_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$ {
  /** @deprecated use `GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$inboundSchema;
  /** @deprecated use `GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$outboundSchema;
  /** @deprecated use `GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$Outbound` instead. */
  export type Outbound =
    GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$Outbound;
}

export function getFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequestToJSON(
  getFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest:
    GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest,
): string {
  return JSON.stringify(
    GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$outboundSchema
      .parse(
        getFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest,
      ),
  );
}

export function getFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest' from JSON`,
  );
}
