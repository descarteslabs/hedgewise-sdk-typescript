/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { mcpOnlyGetForexDataLlmCodeLlmGet } from "../funcs/mcpOnlyGetForexDataLlmCodeLlmGet.js";
import { mcpOnlyGetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGet } from "../funcs/mcpOnlyGetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGet.js";
import {
  mcpOnlyGetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGet,
} from "../funcs/mcpOnlyGetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGet.js";
import { mcpOnlyGetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGet } from "../funcs/mcpOnlyGetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGet.js";
import { mcpOnlyGetSupplyLlm } from "../funcs/mcpOnlyGetSupplyLlm.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class McpOnly extends ClientSDK {
  /**
   * Get historical prices for a future
   *
   * @remarks
   * Returns historical price data for a given future symbol in optimized text format.
   *         Prices are available for all actively traded contracts on each day.
   */
  async getFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGet(
    request:
      operations.GetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(
      mcpOnlyGetFuturesPricesLlmV1AssetsFuturesPricesSymbolLlmGet(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get forecasts for a future
   *
   * @remarks
   * Returns forecast data for a given future symbol in optimized text format.
   *         Forecasts are available for all actively traded contracts.
   */
  async getFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGet(
    request:
      operations.GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(
      mcpOnlyGetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGet(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get long-term forecasts for a future
   *
   * @remarks
   * Returns long-term forecast data for a given future symbol in optimized text format.
   *         Long-term forecasts are directional predictions for price increases.
   */
  async getFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGet(
    request:
      operations.GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(
      mcpOnlyGetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGet(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get forex data for one currency
   *
   * @remarks
   * Returns forex price history for a given currency code in optimized text format.
   */
  async getForexDataLlmCodeLlmGet(
    request: operations.GetForexDataLlmCodeLlmGetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(mcpOnlyGetForexDataLlmCodeLlmGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get supply data for a commodity and country
   *
   * @remarks
   * Returns historical and forecasted supply data for a given
   *         commodity and country in optimized text format. Country codes follow the UN/LOCODE standard:
   *         https://unece.org/trade/cefact/unlocode-code-list-country-and-territory
   */
  async getSupplyLlm(
    request: operations.GetSupplyLlmRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(mcpOnlyGetSupplyLlm(
      this,
      request,
      options,
    ));
  }
}
