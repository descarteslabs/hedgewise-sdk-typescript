/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { strategiesGetStrategies } from "../funcs/strategiesGetStrategies.js";
import { strategiesGetStrategy } from "../funcs/strategiesGetStrategy.js";
import { strategiesGetStrategyForecast } from "../funcs/strategiesGetStrategyForecast.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Strategies extends ClientSDK {
  /**
   * Get a list of all strategies
   *
   * @remarks
   * Returns a list of all strategies. Strategies are trading strategies with associated trajectories and horizons. Optionally filter by strategy name.
   */
  async getStrategies(
    request: operations.GetStrategiesRequest,
    options?: RequestOptions,
  ): Promise<components.GetStrategiesResponse> {
    return unwrapAsync(strategiesGetStrategies(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a strategy by id
   *
   * @remarks
   * Returns a single strategy by id. Returns the same format as the list endpoint but for a single strategy.
   */
  async getStrategy(
    request: operations.GetStrategyRequest,
    options?: RequestOptions,
  ): Promise<components.GetStrategiesResponse> {
    return unwrapAsync(strategiesGetStrategy(
      this,
      request,
      options,
    ));
  }

  /**
   * Get forecasts for a strategy
   *
   * @remarks
   * Returns forecasts for a given strategy. The strategy's trajectories and horizons are used to generate forecasts identical to the POST /v1/assets/futures/forecasts/{symbol} endpoint.
   */
  async getStrategyForecast(
    request: operations.GetStrategyForecastRequest,
    options?: RequestOptions,
  ): Promise<components.GetStrategyForecastResponse> {
    return unwrapAsync(strategiesGetStrategyForecast(
      this,
      request,
      options,
    ));
  }
}
