/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  mcpOnlyGetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGet,
} from "../../funcs/mcpOnlyGetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGet.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    operations
      .GetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGetRequest$inboundSchema,
};

export const tool$mcpOnlyGetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGet:
  ToolDefinition<typeof args> = {
    name:
      "mcp-only-get-futures-long-term-forecast-llm-v1-assets-futures-forecasts-symbol-long-term-forecast-llm-get",
    description: `Get long-term forecasts for a future

Returns long-term forecast data for a given future symbol in optimized text format.
        Long-term forecasts are directional predictions for price increases.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await mcpOnlyGetFuturesLongTermForecastLlmV1AssetsFuturesForecastsSymbolLongTermForecastLlmGet(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      return formatResult(void 0, apiCall);
    },
  };
