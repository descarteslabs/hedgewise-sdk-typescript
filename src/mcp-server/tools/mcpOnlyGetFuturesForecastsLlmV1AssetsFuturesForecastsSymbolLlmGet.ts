/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { mcpOnlyGetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGet } from "../../funcs/mcpOnlyGetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGet.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    operations
      .GetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGetRequest$inboundSchema,
};

export const tool$mcpOnlyGetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGet:
  ToolDefinition<typeof args> = {
    name:
      "mcp-only-get-futures-forecasts-llm-v1-assets-futures-forecasts-symbol-llm-get",
    description: `Get forecasts for a future

Returns forecast data for a given future symbol in optimized text format.
        Forecasts are available for all actively traded contracts.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await mcpOnlyGetFuturesForecastsLlmV1AssetsFuturesForecastsSymbolLlmGet(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      return formatResult(void 0, apiCall);
    },
  };
